require 'vector'

require 'rotor.bitset_array'
require 'rotor.generational_index'

require 'rotor.optional'

global Entity = @record{
  associated_components: vector(GenerationalIndex),
  associated_storages: vector(BitsetArray),
  mask: BitsetArray,
  untracked: boolean
}

-- TODO: add "components count" facultative, so we can already allocate enough space
--  this will avoid reallocations from `associated_*` vectors
function Entity.new(components_count: facultative(usize)): Entity
  local new_entity: Entity = {
    mask = BitsetArray.zero(),
    untracked = true
  }

  ## if not components_count.type.is_niltype then
    new_entity.associated_components:reserve(components_count)
    new_entity.associated_storages:reserve(components_count)
  ## end

  return new_entity
end

function Entity:destroy()
  self.associated_components:destroy()
  self.associated_storages:destroy()
end

function Entity:clear()
  self.associated_components:clear()
  self.associated_storages:clear()
  self.mask = BitsetArray.zero()
  self.untracked = true
end

function Entity:get_component_index(component_gen_idx: GenerationalIndex): optional(uinteger)
  local result: optional(uinteger);

  for i = 0_u, < (@uinteger)(#self.associated_components) do
    if self.associated_components[i] == component_gen_idx then
      result:set(i)
    end
  end

  return result
end

function Entity:get_storage_index(storage_mask: BitsetArray): optional(uinteger)
  local result: optional(uinteger);

  for i = 0_u, < (@uinteger)(#self.associated_storages) do
    if self.associated_storages[i] == storage_mask then
      result:set(i)
    end
  end

  return result
end

function Entity:associate(component_gen_idx: GenerationalIndex, storage_mask: BitsetArray)
  self.mask = self.mask | storage_mask
  self.associated_components:push(component_gen_idx)
  self.associated_storages:push(storage_mask)
end

-- TODO: review this, it really should be an optional?
function Entity:disassociate(possible_index: optional(uinteger)): boolean
  if possible_index.filled then
    local index = possible_index:get()

    self.mask = self.mask & ~self.associated_storages[index]
    self.associated_components:remove(index)
    self.associated_storages:remove(index)

    return true
  else
    return false
  end
end

function Entity:disassociate_by_component(component_gen_idx: GenerationalIndex): boolean
  local possible_index = self:get_component_index(component_gen_idx)
  return self:disassociate(possible_index)
end

function Entity:disassociate_by_storage(storage_mask: BitsetArray): boolean
  local possible_index = self:get_storage_index(storage_mask)
  return self:disassociate(possible_index)
end
