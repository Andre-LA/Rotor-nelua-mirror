local storage = require 'rotor.storage'

## local make_entity = generalize(function(T)
  ##[[
  static_assert(traits.is_type(T), 'passed value %s is not a type', T)
  static_assert(T.is_record, 'passed value %s is not a record', T)

  for i, field in ipairs(T.fields) do
    static_assert(field.type.is_component, 'field %s is not a component', field)
  end
  ]]

  local entityT: type = @#[T]#
  ## entityT.value.is_entity = true

  ## return entityT
## end)

-- Entity generic used to instantiate an entity type in the form of `entity(T)`, where
-- `T` must be a record and all it's fields must be components, otherwise it will result
-- on a compile-time error.
local entity: type = #[make_entity]#
return entity
