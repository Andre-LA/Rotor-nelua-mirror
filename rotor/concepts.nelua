--[[
The Concepts module

It's just a collection of useful concepts around Rotor library traits.

Simple concepts list:

* `an_entity`: accepts any entity record.
* `an_entity_ptr`: accepts any entity record pointer.
* `an_genidx`: accepts any genidx record.
* `an_genidx_ptr`: accepts any genidx record pointer.
* `an_storage`: accepts any storage record.
* `an_storage_ptr`: accepts any storage record pointer.
* `an_component`: accepts any component record.
* `an_component_ptr`: accepts any component record pointer.
* `an_system`: accepts any system value.
* `an_system_ptr`: accepts any system pointer.
* `an_entity_with(filter)`: accepts any entity record that have the components passed on filter
* `an_entity_ptr_with(filter)`: accepts any entity record that have the components passed on filter
* `an_entity_subset(entity_type)`: accepts any entity record that have at least the components of entity_type.
* `an_entity_subset_ptr(entity_type)`: accepts any entity record that have at least the components of entity_type.

Usage:
```lua
local function orbital_bodies_hierarchy(entity_ptr: concepts.an_entity_ptr)
  -- ...
end

-- the filtered concepts requires an expression replacement since the function returns a concept.
local function position_hierarchy(entity_ptr: #[concepts.value.an_entity_ptr_with({Position.value})]#)
  -- ...
end
```
]]

-- Copyright (c) 2019-present Andr√© Luiz Alvares
-- SPDX-License-Identifier: MIT

local Concepts = @record{}

local Concepts.an_entity     = #[concept(function(attr) return attr.type.is_entity end)]#
local Concepts.an_entity_ptr = #[concept(function(attr) return attr.type.is_pointer and attr.type.subtype.is_entity end)]#

local Concepts.an_genidx     = #[concept(function(attr) return attr.type.is_genidx end)]#
local Concepts.an_genidx_ptr = #[concept(function(attr) return attr.type.is_pointer and attr.type.subtype.is_genidx end)]#

local Concepts.an_storage     = #[concept(function(attr) return attr.type.is_storage end)]#
local Concepts.an_storage_ptr = #[concept(function(attr) return attr.type.is_pointer and attr.type.subtype.is_storage end)]#

local Concepts.an_component     = #[concept(function(attr) return attr.type.is_component end)]#
local Concepts.an_component_ptr = #[concept(function(attr) return attr.type.is_pointer and attr.type.subtype.is_component end)]#

local Concepts.an_system     = #[concept(function(attr) return attr.type.is_system end)]#
local Concepts.an_system_ptr = #[concept(function(attr) return attr.type.is_pointer and attr.type.subtype.is_system end)]#

##[[
function Concepts.value.an_entity_with(filter)
  return concept(function(attr)
    if not attr.type.is_entity then
      return false, "the passed value isn't an entity type"
    end

    if not attr.type:filter(filter) then
      return false, "the passed entity doesn't pass the filter"
    end

    return true
  end)
end

function Concepts.value.an_entity_ptr_with(filter)
  return concept(function(attr)
    if not attr.type.is_pointer then
      return false, "the passed value isn't an entity pointer because it isn't a pointer"
    end
  
    if not attr.type.subtype.is_entity then
      return false, "the passed pointer value isn't an entity pointer"
    end

    if not attr.type.subtype:filter(filter) then
      return false, "the passed entity pointer doesn't pass the filter"
    end

    return true
  end)
end

function Concepts.value.an_entity_subset(entity)
  static_assert(entity.is_entity, "the passed type on `an_entity_subset` isn't an entity")
  
  return concept(function(attr)
    if not attr.type.is_entity then
      return false, "the passed pointer value isn't an entity pointer"
    end

    if not attr.type:filter(entity:get_components()) then
      return false, "the passed entity pointer doesn't have the required components"
    end

    return true
  end)
end

function Concepts.value.an_entity_subset_ptr(entity)
  static_assert(entity.is_entity, "the passed type on `an_entity_subset` isn't an entity")
  
  return concept(function(attr)
    if not attr.type.is_pointer then
      return false, "the passed value isn't an entity pointer"
    end

    if not attr.type.subtype.is_entity then
      return false, "the passed pointer value isn't an entity pointer"
    end

    if not attr.type.subtype:filter(entity:get_components()) then
      return false, "the passed entity pointer doesn't have the required components"
    end

    return true
  end)
end
]]

return Concepts
