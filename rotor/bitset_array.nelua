-- TODO: allow custom sizes
-- ## local ROTOR = ROTOR or {}
-- ## ROTOR.bitset_array_size = ROTOR.bitset_array_size or 1

local BITSETARRAY_SIZE <comptime> = 4 --#[ ROTOR.bitset_array_size ]#


global BitsetArray = @record{
  data: [BITSETARRAY_SIZE]usize
}

global BitsetArray.LEFTMOSTBIT: usize <comptime> = (~((~0_u) >> 1_u)) -- 0000... -> 1111... -> 0111... -> 1000...

function BitsetArray.zero(): BitsetArray <inline>
  return (@BitsetArray){ data = {0} }
end

function BitsetArray.one(): BitsetArray <inline>
  return (@BitsetArray){ data = {1} }
end

function BitsetArray:__atindex(i: usize): *usize <inline>
  return &self.data[i]
end

function BitsetArray:copy(): BitsetArray
  local result: BitsetArray = { data = {0} }

  for i = 0, < BITSETARRAY_SIZE do
    result.data[i] = self.data[i]
  end

  return result
end

function BitsetArray.__eq(self: BitsetArray, bitset_array: BitsetArray): boolean
  for i = 0, < BITSETARRAY_SIZE do
    if self.data[i] ~= bitset_array.data[i] then
      return false
    end
  end

  return true
end

function BitsetArray.__band(self: BitsetArray, bitset_array: BitsetArray): BitsetArray
  local result: BitsetArray = {}

  for i = 0, < BITSETARRAY_SIZE do
    result.data[i] = self.data[i] & bitset_array.data[i]
  end

  return result
end


function BitsetArray.__bor(self: BitsetArray, bitset_array: BitsetArray): BitsetArray
  local result: BitsetArray = {}

  for i = 0, < BITSETARRAY_SIZE do
    result.data[i] = self.data[i] | bitset_array.data[i]
  end

  return result
end

function BitsetArray.__bxor(self: BitsetArray, bitset_array: BitsetArray): BitsetArray
  local result: BitsetArray = {}

  for i = 0, < BITSETARRAY_SIZE do
    result.data[i] = self.data[i] ~ bitset_array.data[i]
  end

  return result
end

function BitsetArray.__bnot(self: BitsetArray): BitsetArray
  local result: BitsetArray = {}

  for i = 0, < BITSETARRAY_SIZE do
    result.data[i] = ~self.data[i]
  end

  return result
end

function BitsetArray.__shl(self: BitsetArray, steps: usize): BitsetArray
  local LEFTMOSTBIT <comptime> = BitsetArray.LEFTMOSTBIT
  local result: BitsetArray = BitsetArray.copy(self)

  for _ = 1, steps do
    for i = BITSETARRAY_SIZE - 1, 0, -1 do
      local next_bs_contains_leftmostbit = (do
        if i > 0 then
          in result.data[i-1] & LEFTMOSTBIT == LEFTMOSTBIT
        end
        in false
      end)

      result.data[i] = result.data[i] << 1

      if next_bs_contains_leftmostbit then
        result.data[i] = result.data[i] | 1
      end
    end
  end

  return result
end

function BitsetArray.__shr(self: BitsetArray, steps: uinteger): BitsetArray
  local LEFTMOSTBIT <comptime> = BitsetArray.LEFTMOSTBIT
  local result = BitsetArray.copy(self)

  for _ = 1, steps do
    for i = 0, < BITSETARRAY_SIZE do
      local next_bs_contains_leftmostbit = (do
        if i < BITSETARRAY_SIZE - 1 then
          in result.data[i+1] & 1 == 1
        end
        in false
      end)

      result.data[i] = result.data[i] >> 1

      if next_bs_contains_leftmostbit then
        result.data[i] = result.data[i] | LEFTMOSTBIT
      end
    end
  end

  return result
end

## if TEST then
  local a = BitsetArray.zero()
  assert(a[0] == 0)
  assert(a[1] == 0)
  assert(a[2] == 0)
  assert(a[3] == 0)

  local b = BitsetArray.one()
  assert(b[0] == 1)
  assert(b[1] == 0)
  assert(b[2] == 0)
  assert(b[3] == 0)

  local c: BitsetArray = BitsetArray.copy(a)

  assert(a[0] == 0)
  assert(a[1] == 0)
  assert(a[2] == 0)
  assert(a[3] == 0)

  assert(c[0] == 0)
  assert(c[1] == 0)
  assert(c[2] == 0)
  assert(c[3] == 0)

  a[2] = 1234

  assert(a[0] == 0)
  assert(a[1] == 0)
  assert(a[2] == 1234)
  assert(a[3] == 0)

  assert(c[0] == 0)
  assert(c[1] == 0)
  assert(c[2] == 0)
  assert(c[3] == 0)

  local a = ~a
  assert(a[0] == ~0_u)
  assert(a[1] == ~0_u)
  assert(a[2] == ~1234_u)
  assert(a[3] == ~0_u)

  local a = ~a
  assert(a[0] == 0)
  assert(a[1] == 0)
  assert(a[2] == 1234)
  assert(a[3] == 0)

  local a_bor_na = a | (~a)
  assert(a_bor_na[0] ==    (0_u) |    (~0_u))
  assert(a_bor_na[1] ==    (0_u) |    (~0_u))
  assert(a_bor_na[2] == (1234_u) | (~1234_u))
  assert(a_bor_na[3] ==    (0_u) |    (~0_u))

  local a_band_na = a & (~a)
  assert(a_band_na[0] ==    (0_u) &    (~0_u))
  assert(a_band_na[1] ==    (0_u) &    (~0_u))
  assert(a_band_na[2] == (1234_u) & (~1234_u))
  assert(a_band_na[3] ==    (0_u) &    (~0_u))

  local d = BitsetArray.one()
  assert(d[0] == 1)
  assert(d[1] == 0)
  assert(d[2] == 0)
  assert(d[3] == 0)

  d = d << 1
  assert(d[0] == 2)
  assert(d[1] == 0)
  assert(d[2] == 0)
  assert(d[3] == 0)

  d = d << 1
  assert(d[0] == 4)
  assert(d[1] == 0)
  assert(d[2] == 0)
  assert(d[3] == 0)

  d = d >> 1
  assert(d[0] == 2)
  assert(d[1] == 0)
  assert(d[2] == 0)
  assert(d[3] == 0)

  d[1] = ~0_u
  assert(d[0] ==  2)
  assert(d[1] == ~0_u)
  assert(d[2] ==  0)
  assert(d[3] ==  0)

  d = d << 1
  assert(d[0] ==  4)
  assert(d[1] == ~0_u << 1_u)
  assert(d[2] ==  1)
  assert(d[3] ==  0)

  d = d >> 1
  assert(d[0] ==  2)
  assert(d[1] == ~0_u)
  assert(d[2] ==  0)
  assert(d[3] ==  0)

  local e = BitsetArray.one()
  assert(e[0] == 1)
  assert(e[1] == 0)
  assert(e[2] == 0)
  assert(e[3] == 0)

  e[2] = ~0_u
  assert(e[0] ==  1_u)
  assert(e[1] ==  0_u)
  assert(e[2] == ~0_u)
  assert(e[3] ==  0_u)

  e = e << 3
  assert(e[0] ==  8_u)
  assert(e[1] ==  0_u)
  assert(e[2] == ~0_u << 3_u)
  assert(e[3] ==  7_u)

  e = e >> 3
  assert(e[0] ==  1_u)
  assert(e[1] ==  0_u)
  assert(e[2] == ~0_u)
  assert(e[3] ==  0_u)

  -- test final state
  assert(a[0] == 0)
  assert(a[1] == 0)
  assert(a[2] == 1234)
  assert(a[3] == 0)

  assert(b[0] == 1)
  assert(b[1] == 0)
  assert(b[2] == 0)
  assert(b[3] == 0)

  assert(c[0] == 0)
  assert(c[1] == 0)
  assert(c[2] == 0)
  assert(c[3] == 0)

  assert(a_bor_na[0] ==    (0_u) |    (~0_u))
  assert(a_bor_na[1] ==    (0_u) |    (~0_u))
  assert(a_bor_na[2] == (1234_u) | (~1234_u))
  assert(a_bor_na[3] ==    (0_u) |    (~0_u))

  assert(a_band_na[0] ==    (0_u) &    (~0_u))
  assert(a_band_na[1] ==    (0_u) &    (~0_u))
  assert(a_band_na[2] == (1234_u) & (~1234_u))
  assert(a_band_na[3] ==    (0_u) &    (~0_u))

  assert(d[0] ==  2)
  assert(d[1] == ~0_u)
  assert(d[2] ==  0)
  assert(d[3] ==  0)

  assert(e[0] ==  1_u)
  assert(e[1] ==  0_u)
  assert(e[2] == ~0_u)
  assert(e[3] ==  0_u)

  print'bitset array tests OK'
## end
