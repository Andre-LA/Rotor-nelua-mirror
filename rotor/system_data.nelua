require 'vector'
require 'rotor.bitset_array'
require 'rotor.entity'
require 'rotor.storage'

global SystemData = @record{
  mask: BitsetArray,
  required_storages: vector(BitsetArray),
  components_indexes: vector(vector(GenerationalIndex)),
  available_indexes: vector(isize)
}

function SystemData.new(components: vector(BitsetArray)): SystemData
  local new_system_data: SystemData = {
    mask = BitsetArray.zero(),
    required_storages = components,
    components_indexes = {},
    available_indexes = {}
  }

  for i = 0, < #components do
    new_system_data.mask = new_system_data.mask | components[i]
  end

  return new_system_data
end

function SystemData:destroy()
  self.required_storages:destroy()

  for i = 0, < #self.components_indexes do
    self.components_indexes[i]:destroy()
  end
  self.components_indexes:destroy()

  self.available_indexes:destroy()
end

local function collect_components(system_data: *SystemData, entity_i: *Entity, out_result: *vector(GenerationalIndex))
  out_result:clear()
  out_result:reserve(#system_data.required_storages)

  -- for each required storage, insert the components indexes respectively
  for i = 0, < #system_data.required_storages do
    for j = 0, < #entity_i.associated_storages do
      if system_data.required_storages[i] == entity_i.associated_storages[j] then
        out_result:push(entity_i.associated_components[j])
        break
      end
    end
  end
end

function SystemData:update(entity: *Entity)
  local masks_intersection = self.mask & entity.mask

  if masks_intersection == self.mask then
    local idx_to_insert: usize = 0

    if #self.available_indexes > 0 then
      idx_to_insert = self.available_indexes:pop()
    else
      idx_to_insert = #self.components_indexes
      self.components_indexes:push({})
    end

    collect_components(self, entity, self.components_indexes[idx_to_insert])
  end
end

function SystemData:mark_available(idx: isize)
  self.available_indexes:push(idx)
  local idx_components_indexes: *vector(GenerationalIndex) = &self.components_indexes[idx]
  idx_components_indexes:clear()
end

function SystemData:iterate_ids() :(
  function(ids_vec: *vector(vector(GenerationalIndex)), index: isize): (boolean, isize, vector(GenerationalIndex)),
  *vector(vector(GenerationalIndex)),
  isize
)
  local function iterator(ids_vec: *vector(vector(GenerationalIndex)), index: isize): (boolean, isize, vector(GenerationalIndex))
    while index < #ids_vec do
      index = index + 1

      if index < #ids_vec then
        local ids = ids_vec[index]
        if #ids > 0 then
          return true, index, ids
        end
      else
        return false, -1, (@vector(GenerationalIndex)){}
      end
    end

    return false, -1, (@vector(GenerationalIndex)){}
  end

  return iterator, &self.components_indexes, -1
end
