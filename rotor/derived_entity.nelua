--[[
Returns a new entity type that copies the fields of the `base_entity` type
(which must be an entity type), plus the `extra_components` fields.

> Note: Only the record it's "cloned", not the methods, also this
is not an inheritance implementation, although it's used in a similar way.

Usage:
```lua
-- please read the `derived` and `derived_entity_tree` examples
-- to read how to use this feature in practice.

local entity = require 'rotor.entity'
local component = require 'rotor.component'
local derived_entity = require 'rotor.derived_entity'

-- person (the base)
local PersonController <nickname 'PersonController'> = @component(record{
  name: string,
})

local Person <nickname 'Person'> = @entity(record{
  person_controller: PersonController,
})

-- warrior
local WarriorController <nickname 'WarriorController'> = @component(record{
  atk: integer
})

local Warrior <nickname'Warrior'> = @derived_entity(Person, record{
  warrior_controller: WarriorController,
})

-- wizard
local WizardController <nickname 'WizardController'> = @component(record{
  mp: integer
})

local Wizard <nickname 'Wizard'> = @derived_entity(Person, record{
  wizard_controller: WizardController,
})

-- entity variables
local warrior: Warrior = {
  person_controller = { 'The Brave Warrior' },
  warrior_controller = { atk = 50 },
}

local wizard: Wizard = {
  person_controller = { 'The Clever Wizard' },
  wizard_controller = { mp = 150 },
}
```
]]

-- Copyright (c) 2019-present Andr√© Luiz Alvares
-- SPDX-License-Identifier: MIT

local utils = require 'rotor.utils'
local entity = require 'rotor.entity'

## local make_derived_entity = generalize(function(base_entity, extra_components)
  ##[[
  static_assert(
    base_entity.is_entity,
    "'%s' was passed as a base entity, but it's not an entity type",
    base_entity.nickname
  )

  for _, field in ipairs(extra_components.fields) do
    utils.value.assert_entity_field(field)
  end
  ]]

  local derived_entity_t = @entity(record{})

  ##[[
  for _, field in ipairs(base_entity.fields) do
    derived_entity_t.value:add_field(field.name, field.type)
  end
  for _, field in ipairs(extra_components.fields) do
    derived_entity_t.value:add_field(field.name, field.type)
  end

  return derived_entity_t
  ]]
## end)

local derived_entity: type = @#[make_derived_entity]#
return derived_entity
