--[[
Deriving entities example

Note: Be sure to check `override` example first.

Deriving an entity it's essentially using the `derived_entity` type
constructor to create a **new** entity type that copies the same fields
of another entity, and _extending_ it with more components or children fields.

It's pretty useful when a entity type it's a superset of another more
basic entity type or you want to create a new type while aliasing to another
entity type.

Note that only the record's fields are copied, not the methods, thus for
reusable methods, either declare them on components directly; use local
functions that receives the components on arguments; use traits
to make polymorphic functions that accepts both or make these methods
on the system filter.

This is inspired from "variant prefabs" on other game engines.
]]

-- Copyright (c) 2019-present Andr√© Luiz Alvares
-- SPDX-License-Identifier: MIT

local io = require 'io'
local entity = require 'rotor.entity'
local component = require 'rotor.component'
local derived_entity = require 'rotor.derived_entity'
local rotor_concepts = require 'rotor.concepts'

local Class = @enum{
  Person = 0,
  Wizard,
  Warrior,
}

function Class.__tostring(self: Class): string
  switch self do
    case Class.Wizard  then return 'Wizard'
    case Class.Warrior then return 'Warrior'
    else return 'Person'
  end
end

-- Note: Prefer using nicknames to improve debuggability, otherwise it
--       would be just "componentT".
local PersonController <nickname 'PersonController'> = @component(record{
  name: string,
  class: Class,
})

-- Note: Prefer to use methods on the components instead on on the entities,
--       this way you make the code reusable on derived entity types.
function PersonController:introduce_yourself()
  io.printf("I'm the %s %s\n", tostring(self.class), self.name)
end

local Person <nickname 'Person'> = @entity(record{
  person_controller: PersonController,
})

-- the an_entity_subset_ptr accepts any entity pointer that have at least the components of Person.
function Person.derived_init(a_person: #[rotor_concepts.value.an_entity_subset_ptr(Person.value)]#, name: string, class: Class)
  a_person.person_controller = {
    =name,
    =class
  }
end

-- warrior
local WarriorController <nickname 'WarriorController'> = @component(record{
  atk: integer
})

local Warrior <nickname'Warrior'> = @derived_entity(Person, record{
  warrior_controller: WarriorController,
})

function Warrior.init(name: string): Warrior
  local warrior: Warrior
  Person.derived_init(&warrior, name, Class.Warrior)

  warrior.warrior_controller = {
    atk = 100
  }

  return warrior
end

-- wizard
local WizardController <nickname 'WizardController'> = @component(record{
  mp: integer
})

local Wizard <nickname 'Wizard'> = @derived_entity(Person, record{
  wizard_controller: WizardController,
})

function Wizard.init(name: string): Wizard
  local wizard: Wizard
  Person.derived_init(&wizard, name, Class.Warrior)
  
  wizard.wizard_controller = {
    mp = 120
  }

  return wizard
end

local John = @record{}

function John.init(): Warrior
  return Warrior.init('John')
end

local Maria = @record{}

function Maria.init(): Wizard
  return Wizard.init('Maria')
end

local john, maria = John.init(), Maria.init()
john.person_controller:introduce_yourself()
maria.person_controller:introduce_yourself()

